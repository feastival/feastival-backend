datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  username String  @unique
  imageUrl String?
  password String

  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id], onUpdate: Cascade)

  trackedEvents Event[] @relation("EventTrackedByUser")
  createdEvents Event[] @relation("EventCreatedByUser")

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Artist {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  imageUrl    String?

  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Event {
  id          String  @id @default(uuid())
  name        String
  imageUrl    String?
  description String?
  startedAt   DateTime?
  finishedAt  DateTime?
  price       Int?

  statusId String
  status   Status @relation(fields: [statusId], references: [id], onUpdate: Cascade)

  genre   Genre[]
  artists Artist[]
  users   User[]   @relation("EventTrackedByUser")

  organizerId String
  organizer   User   @relation("EventCreatedByUser", fields: [organizerId], references: [id])

  locationId String?
  location   EventLocation? @relation(fields: [locationId], references: [id], onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EventLocation {
  id            String   @id @default(uuid())
  venue         String?
  address       String?
  mapsURL       String? // https://goo.gl/maps/1xABCDEF123456
  province      String?
  city          String?
  street        String?
  streetDetails String?
  postalCode    String?
  latitude      Decimal? // -90 to 90, Example: -5.1234567
  longitude     Decimal? // -180 to 180, Example: 105.1234567

  event Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Thread {
  id      String @id @default(uuid())
  title   String
  content String

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  threadId String
  thread   Thread @relation(fields: [threadId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Status {
  id        String   @id @default(uuid())
  name      String   @unique
  event     Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Genre {
  id        String   @id @default(uuid())
  name      String   @unique
  event     Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
